# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MapClicker
                                 A QGIS plugin
 Demo to fetch coordinates from map
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-11-28
        git sha              : $Format:%H$
        copyright            : (C) 2021 by crstn
        email                : carsten.kessler@hs-bochum.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import Qt, QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .map_clicker_dialog import MapClickerDialog
import os.path

from qgis.gui import QgsMapTool



class SendPointToolCoordinates(QgsMapTool):
    """ Catches the coordinates from a click on a layer and displays them in a UI element
    """
    def __init__(self, canvas, layer, window):
        """ Constructor.
        """
        QgsMapTool.__init__(self, canvas)
        self.canvas = canvas
        self.layer = layer
        self.window = window # where we'll show the coordinates
        self.setCursor(Qt.CrossCursor)

    """ Called when the mouse click is released on the canvas.
    """
    def canvasReleaseEvent(self, event):
        point = self.toLayerCoordinates(self.layer, event.pos())
        self.window.label.setText(str(point.x())+", "+str(point.y()))





class MapClicker:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        # Save reference to the QGIS interface
        self.iface = iface


        # Declare instance attributes
        self.actions = []
        self.menu = u'&Map Clicker'

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None



    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):


        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/map_clicker/icon.png'
        self.add_action(
            icon_path,
            text=u'Click!',
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                u'&Map Clicker',
                action)
            self.iface.removeToolBarIcon(action)

    # Activates our pointTool; called when when the
    # cooresponding button in the GUI is clicked
    # def activate_display_point(self):
    #     layer, canvas = self.iface.activeLayer(), self.iface.mapCanvas()
    #
    #     send_point_tool_coordinates = SendPointToolCoordinates(
    #         canvas,
    #         layer,
    #         self.dlg
    #     )
    #     canvas.setMapTool(send_point_tool_coordinates)



    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = MapClickerDialog()

            layer, canvas = self.iface.activeLayer(), self.iface.mapCanvas()

            # Create an instance of our QgsMapTool-derived class ...
            send_point_tool_coordinates = SendPointToolCoordinates(
                canvas,
                layer,
                self.dlg
            )

            # ... and make it the current tool for the canvas
            canvas.setMapTool(send_point_tool_coordinates)

            # keep the plugin window on top
            self.dlg.setWindowFlags(Qt.WindowStaysOnTopHint)



        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()



        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
